<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>隨筆</title>
    <link>https://harveyChang67.github.io/</link>
    <description>Recent content on 隨筆</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 20 Jan 2023 00:14:29 +0000</lastBuildDate><atom:link href="https://harveyChang67.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2022_review</title>
      <link>https://harveyChang67.github.io/posts/2022_review/</link>
      <pubDate>Fri, 20 Jan 2023 00:14:29 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/2022_review/</guid>
      <description>2022 小小回顧 分享幾個今年的領會來做個回顧。
《易經》教會我衡量主觀、客觀、時機、演變等道理， 讓我生活、工作中的多事讓我產生很多的省思。
轉到現職時向天地、菩薩卜問的卦－巽卦很好的交代了我的工作內容。
所在單位希望進行雲端化的大工程， 我嘗試幫忙在維護為主的組織文化中引領一群 Junior 挑戰 研發 任務， 在 團隊合作、成員培養、技術探勘、學習、舊AP的底層技術破解、人員招募 等方面都有著巽卦的寓意表現， （這部分也讓我曾被前同事說過很像 龍 的特點） 其中特別想分享的是我在 人員招募、團隊合作、技術學習方面 等方面在思維層面上的學習， 這些體驗的描述通常不會侷限在 單一觀點 或是限制在 單一層面， 造成不好理解的地方請多見諒。
招募 這年我幫忙招募在 104 上看過了非常多的履歷，以及進行了不下 30 場面試面談，調整過數次我的面試面談的進行方式與提問內容。 首先我想分享的是：
 你的 104 履歷被看過，不太表用人單位真的有興趣
 原因很簡單：招募人員可以都先點開後續慢慢挑，下次查詢用「只看未讀」來過濾。 也因此常有人說 「104 的履歷可以關閉一陣子，微調內容再開，可能有新機會」的成因。 （當然，有時間的單位可以做個爬蟲去撈，分析內容關鍵字來省事）
履歷內容的評估 引申出履歷內容最好要有：
  深度（如 心智圖可以展開數層）。 將經歷 抽象化 的主要敘述，經歷成為 use case。 人格特質。（特別的心得、成就、行為慣性）   不知道各家資方除了技術關鍵字之外還會下什麼千奇百怪的&amp;hellip; （認真、負責、抗壓、&amp;hellip;） 但懶得寫請出、不擅長寫的人還是居多， 其次是寫不到重點（檢討中~）。
特別的是，若能將思維脫離「讓人知道我」轉移到「針對需求去寫」那就神了。
「過去績效不代表未來之表現」  半年前我對 適才適所 很不以為然，半年後我信了。
 『適才適所』 這句話其實囊括了 主客觀 雙重因素去配合的， 正如《易經》 64 卦的 上下卦、7 habits 的 雙贏思維、知彼解己 的概念。</description>
    </item>
    
    <item>
      <title>Cloud Service Provider_and_sloution_poc</title>
      <link>https://harveyChang67.github.io/posts/cloud-service-provider_and_sloution_poc/</link>
      <pubDate>Thu, 03 Nov 2022 00:05:10 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/cloud-service-provider_and_sloution_poc/</guid>
      <description>現職崗位有機會接觸代表不同 Cloud Service Provider 的顧問服務， 他們各自對自家服務產品都很熟稔、很專業， 但對於客製化上雲需求的課題卻顯得較輕忽。
以實際經驗來說， 公司其他單位窗口詢問 AWS 顧問關於轉換地端 Database 資料上雲端的解決方案， 僅得到回答:「版本太舊&amp;hellip;」
 我與同事早早有解決方案 x 2&amp;hellip;
 另外是曾經詢問 Azure 顧問關於權限設定問題， 最後是 代理商 業務細心、耐心幫忙解答。
 該顧問參與幾次會議老欠調查進度後消失
 模仿一點點市場分群分析， 假設三大 Cloud Service Provider 都希望爭取更多人使用雲服務， （也許可以找到市調/問卷資料進一步分析） 較容易爭取的、需求較為普遍的客群 應有相當程度地成為使用者，（紅海） 剩下的客群假設有預算但上雲需求有遇到難度的， 這類生意做不做？
我們確實也遇到這樣的案例， Google 代表做了許多 POC 承諾（業務面 domain knowhow 還沒掌握的狀況下）， 還真的用 Google AppSheet 爭取到案子。
過程真的替他捏把汗， 看得出來對於系統架構面的專才， 但是很疏於透過 Q&amp;amp;A 去抽絲剝繭梳理 業務面進一步需求， 或是利用一些設計方法來確認客戶需求。
或許扮演這樣角色的職缺會由其他代理商、軟體服務公司的「雲端解決方案架構師」以 POC 驗證型專案來銜接？</description>
    </item>
    
    <item>
      <title>Materialized_Views</title>
      <link>https://harveyChang67.github.io/posts/materialized_views/</link>
      <pubDate>Fri, 30 Sep 2022 02:52:30 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/materialized_views/</guid>
      <description>紀錄
Materialized Views 與 實體表的副本 做法真的一樣？
What’s the catch?
差異在 前者 會額外占用 memory， 因此最好用在更有價值的查詢結果快取上， 別想著拿來替代 AB表切換。
 ref:
 Understanding Materialized Views — Part 1 Materialized Views: The Cost-Effective Way To Extract Insights Why Use a Materialized View?  </description>
    </item>
    
    <item>
      <title>Dotnet_parallel</title>
      <link>https://harveyChang67.github.io/posts/dotnet_parallel/</link>
      <pubDate>Fri, 30 Sep 2022 02:40:01 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/dotnet_parallel/</guid>
      <description>一個 Batch Task 遇到一段 Code， SQL.Select in a for-loop that runs 25k times 特別是 for-loop 內 以 await 去使用了 async 的 DB Layer Func.
我請團隊在 Parallel 的修改版本加上限制。
var parallel = new ParallelOptions { MaxDegreeOfParallelism = 5 }; 也與另一個做法 Task.Run, Task.WhenAll 進一步區隔。
 ref:
 Running Async Foreach Loop C# async await Parallel.ForEach vs Task.Run and Task.WhenAll https://gitter.im/npgsql/npgsql?at=595a0319c101bc4e3a46654d   系統式思考 這個課題在團隊內的討論很有趣， 討論過程中對於可能的問題不乏 AP Logic 有問題、SQL 有問題、&amp;hellip;， 但卻不太動手實測每段時間。
那段邏輯在開發環境中執行一個 SQL SELECT Query 約 2ms， 但 For Loop 高達 3萬筆資料， 在 不修改 AP 主 Logic &amp;amp; SQL 的前提下可發揮的空間有限（數位轉型日常，除非先完成驗證過結果正確）， 因此團隊將 部分邏輯 改為 Parallel 是可以進行嘗試的。 （前提是該 AP Logic 不會因此修改造成 髒資料）</description>
    </item>
    
    <item>
      <title>Deploy docker image to Azure</title>
      <link>https://harveyChang67.github.io/posts/azure_container/</link>
      <pubDate>Mon, 22 Aug 2022 08:58:34 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/azure_container/</guid>
      <description>將 Docker 映像部署至 Azure 容器執行個體</description>
    </item>
    
    <item>
      <title>指引 =&gt; 槓桿 x 時勢</title>
      <link>https://harveyChang67.github.io/posts/timing_situation/</link>
      <pubDate>Sun, 21 Aug 2022 09:56:52 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/timing_situation/</guid>
      <description>易經《彖辭》中有十二卦提到「時」的「大矣哉」。 孔子晚年讀《易經》最有感想的是 『時也，命也。』
孫子曰： 『昔之善戰者，先為不可勝，==以待敵之可勝==。不可勝在己，可勝在敵。故善戰者，能為不可勝，不能使敵之必可勝。故曰：勝可知，而不可為。』
『故善戰者，求之於勢，不責於人，故能==擇人而任勢==。任勢者，其戰人也，如轉木石。木石之性，安則靜，危則動，方則止，圓則行。故善戰人之勢，如轉圓石於千仞之山者，勢也。』
宣揚實踐理念、做事、&amp;hellip;. 都講求這個&amp;hellip; 難得糊塗~~</description>
    </item>
    
    <item>
      <title>Moongodb_data_modeling</title>
      <link>https://harveyChang67.github.io/posts/moongodb_data_modeling/</link>
      <pubDate>Wed, 10 Aug 2022 07:03:15 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/moongodb_data_modeling/</guid>
      <description>紀錄一下
考量點  schema_version。 幾乎可以優先從「商業邏輯」、「畫面呈現」 等 high level來開始規劃。 document 是原子操作（atomic operation），規劃時必須考量「寫入、更新」頻繁程度，適度將 document 分散。 預先安插可用於 sharding 的設定欄位。  The Bucket Pattern 很適合 IoT、巡查表單類 的資料放置。
The Subset Pattern 文中提到的 Product - Reviews 案例很實用。 Product Collention 內紀錄前 10個 Review， 可以做為產品資訊頁「第一擊」的資訊儲存， 進一步的資訊再從其他 Collection 撈取。（如：Review）
Reference：
 Data Modeling for MongoDB Building with Patterns: A Summary  </description>
    </item>
    
    <item>
      <title>About_hiring_n_recruiting 關於 雇用、招聘</title>
      <link>https://harveyChang67.github.io/posts/about_hiring_n_recruiting/</link>
      <pubDate>Thu, 21 Jul 2022 23:04:08 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/about_hiring_n_recruiting/</guid>
      <description>近期因 Team Building 需要，公司輔導我承攬了招募的工作， 有幸直接進 104 平台挖履歷， 三不五時會發現些 大神 或是 頗奇葩的資料：
 智商 IQ 180 照片看起來根本是 灌籃高手 的 安西教練 真人版，相似度 99% 使用 Line 貼圖當作履歷照片 斐陶斐榮譽會員  經過一段時間的找合適的履歷與擔任面試官進行面談， 一邊同時對我自己的履歷、招聘的意義等進行檢討與思考， 這邊我分享一些從主觀、客觀觀點學到的心得感想。
招聘方的困擾 一般招聘方作業大概是 HR 轉貼 用人單位開出來的條件， 或是 根據 這條件去幫忙找， 排除掉 HR 對 需求領域的經驗之外， 大概只能用概略理解、關鍵字 去幫忙找， 以及職務描述中普遍看到是需要「會/懂&amp;hellip;」、「x年經驗&amp;hellip;」。
有更多時候是 用人單位主管並沒有時間去挖掘， 大家忙著忙著， 也就將招聘大事變成了 routine job 不假思索。
藉助了 實作題、線上測驗、白板題 等來檢驗（希望取得客觀、可量測的評估）， 輔以 行為測驗、多次面試、人格特質發覺等等， 希望找到正確的人， 但相對地， 一段招聘過程成本非常大。
招聘流程、評量方式等的侷限性與盲點， 也是造成常常應試者通過面試進入團隊後， 一年以內離開的主要原因。
我們當然希望新同仁的表現可以：
 符合JD上絕大部分的要求 完成所有設定的工作目標（最好能超出目標） 最好還能替團隊帶來正向影響力，感染其他人 任何其他好的驚喜&amp;hellip;  有沒有發現 JD 只佔了 1/4？ 以及一半以上的「期待」是抽象不好評估的&amp;hellip;</description>
    </item>
    
    <item>
      <title>I_ching_32 易經 恆卦</title>
      <link>https://harveyChang67.github.io/posts/i_ching_32/</link>
      <pubDate>Sun, 26 Jun 2022 10:45:40 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/i_ching_32/</guid>
      <description>易經－恆卦 雷風相與，巽卦在內，震卦在外，分別為柔、剛的「動」，並各得其所。
可窺見恆常之道在於「有原則下的變通」，有所變有所不變，絕非一成不變。
鑒於 恆卦 中的 坎象 也預示了 恆常 是相當不容易的，因此運用變通勤於「補過」、修正，來克服挑戰、檢討改善、優化&amp;hellip;。
發想 假若說「巽卦」諭示的像風一樣變動快速、柔的力量無孔不入，逐漸嶄露頭角而進入 恆卦的話，確實很像運轉不息的 陀螺 般&amp;hellip;</description>
    </item>
    
    <item>
      <title>Azure_pipelines_rdb</title>
      <link>https://harveyChang67.github.io/posts/azure_pipelines_rdb/</link>
      <pubDate>Sat, 25 Jun 2022 08:58:34 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/azure_pipelines_rdb/</guid>
      <description>從 Azure Pipelines 內更動 DB 的方式
psql ....  SSH task &amp;ndash;&amp;gt; Postgres + SSH Docker task(ver.1) + Run postres docker &amp;ndash;&amp;gt; psql&amp;hellip;  </description>
    </item>
    
    <item>
      <title>Azure_pipelines_timezone</title>
      <link>https://harveyChang67.github.io/posts/azure_pipelines_timezone/</link>
      <pubDate>Sun, 19 Jun 2022 12:36:19 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/azure_pipelines_timezone/</guid>
      <description>使用 Azure Pipelines 編譯 dotnet 時遇到一個狀況記錄下來。
專案中有使用了沒有綁定 TimeZone 的時間相關函式， 造成資料寫入 DB 時有偏差， （DB 已設定）
可以嘗試設定 Agent 的 TimeZone 設定， （透過 PowerShell task）： Win:
Get-TimeZone Set-TimeZone &amp;#34;Taipei Standard Time&amp;#34; Get-TimeZone Ubuntu:
sudo timedatectl set-timezone Asia/Taipei </description>
    </item>
    
    <item>
      <title>C_sharp_string2class</title>
      <link>https://harveyChang67.github.io/posts/c_sharp_string2class/</link>
      <pubDate>Wed, 25 May 2022 13:49:37 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/c_sharp_string2class/</guid>
      <description>String to Class and then call Method var t = Type.GetType(&amp;#34;WebApplication1.Services.&amp;#34;+ServiceName+&amp;#34;, WebApplication1&amp;#34;); var service_instance = Activator.CreateInstance((t)); ServiceValues actual = (ServiceValues)service_instance.GetType().GetMethod(FunctionName).Invoke(service_instance, new object[] { temp, fm_repo }); 第一行可以參考後，再進一步優化程式。
Console.WriteLine(typeof(TService).AssemblyQualifiedName); 有考慮進一步改寫為 function，參數可能是 className, methodName, 參數：new object[] { temp, fm_repo }</description>
    </item>
    
    <item>
      <title>C_sharp_big5</title>
      <link>https://harveyChang67.github.io/posts/c_sharp_big5/</link>
      <pubDate>Wed, 18 May 2022 07:19:28 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/c_sharp_big5/</guid>
      <description>需求 老式需求
3 個欄位的資訊， 希望擷取出中間的 16 bytes 的欄位
20040609台北市第81分公司0800-000123 20040609彰化縣第1分公司 0800-000123 通常會困擾於 編譯器對於資料型態長度的判定、編碼。 （其他程式語言也會遇到類似狀況）
在 C# 中則會遇到 string Length 變動的問題無法如預期做切割， 因此運用「==Big5編碼==」方式在 中文佔用 2 bytes、英數佔用 1 bytes 的特性， 再轉為 sub string。
System.Text.Encoding encoding = System.Text.Encoding.GetEncoding(950); string tempstr = &amp;#34;&amp;#34;; byte[] strBytes = encoding.GetBytes(str); tempstr = encoding.GetString(strBytes, start, lengths); </description>
    </item>
    
    <item>
      <title>RepoDB_C#</title>
      <link>https://harveyChang67.github.io/posts/repodb_c#/</link>
      <pubDate>Wed, 27 Apr 2022 11:21:06 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/repodb_c#/</guid>
      <description>RepoDB 在 Generic Repository Pattern 中很好用， 免去使用 Dapper 去自建 SQL 產生器， 但是有幾個限制 RepoDB Limitations， 其中一個令人訝異 -&amp;gt; Composite Keys。
Composite Keys RepoDB 只會處理 1 個 Primary Key&amp;hellip;. 這邊紀錄兩個相關的資訊
Update + condition termsList.Add( new QueryField(&amp;#39;Id&amp;#39;, Operation.Equal, &amp;#39;10095&amp;#39;) ); termsList.Add( new QueryField(&amp;#39;Name&amp;#39;, Operation.Equal, &amp;#39;John&amp;#39;) ); ret = dbConn.Update(entity, new QueryGroup(termsList, Conjunction.And)); Primary Properties Model 中標註 Mapping，
public class FMRMUSRT { [Primary] // Primary decoration  public string Id { get; set; } [Primary] // Primary decoration  public string item_cd { get; set; } public string?</description>
    </item>
    
    <item>
      <title>Mac_on_aws_ec2</title>
      <link>https://harveyChang67.github.io/posts/mac_on_aws_ec2/</link>
      <pubDate>Wed, 20 Apr 2022 01:57:26 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/mac_on_aws_ec2/</guid>
      <description>MAC x EC2 Reference: How to launch a macOS instance on Amazon EC2 (Mac instances)
放新加坡，速度慢慢的</description>
    </item>
    
    <item>
      <title>Aws_saa C02</title>
      <link>https://harveyChang67.github.io/posts/aws_saa-c02/</link>
      <pubDate>Wed, 06 Apr 2022 05:13:35 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/aws_saa-c02/</guid>
      <description>Database  Amazon RDS NoSQL  權衡 可靠性 x 性能 下，兩類型對比：Aurora vs DynamoDB
Amazon redshift 非資料庫 而是 Data Warehouse。 Data Warehouse</description>
    </item>
    
    <item>
      <title>Vanced_yt_xiomi</title>
      <link>https://harveyChang67.github.io/posts/vanced_yt_xiomi/</link>
      <pubDate>Tue, 01 Feb 2022 09:55:06 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/vanced_yt_xiomi/</guid>
      <description>小米、紅米 搭配使用 Vanced Youtube 無法撥放到 ChromeCast的解法 降板！
https://itechify.com/2021/10/10/unable-to-cast-youtube-vanced-on-tv-here-is-the-fix/</description>
    </item>
    
    <item>
      <title>Lock</title>
      <link>https://harveyChang67.github.io/posts/lock/</link>
      <pubDate>Thu, 27 Jan 2022 06:14:32 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/lock/</guid>
      <description>單機鎖 TODO
分布式鎖 相關  單機鎖&amp;ndash;&amp;gt;分布式鎖：架構面試題 #1, 線上交易的正確性 將 Redlock 有關的問題整理清楚：  如何做可靠的分布式锁，Redlock真的可行么 https://twgreatdaily.com/fGfHe28BMH2_cNUgKj2O.html     概念 悲觀鎖（Pessimistic Lock） 預期每次都會遇到資源爭奪。
共享鎖（Share Lock） 排他鎖（Exclusive Lock）
作用範圍：
  行鎖（row lock） FOR UPDATE、FOR UPDATE NO KEY、LOCK IN SHARE MODE
  表鎖（table lock）
SELECT SUM(..) FROM ..   樂觀鎖（Optimistic Lock） Optimistic Concurrency Control 每次存取都認為不會有別人來搶。
CAS（比較與交換，Compare and swap）
 非阻塞同步（Non-blocking Synchronization）、無鎖程式設計演算法（ Non-blocking algorithm）
 適合：讀多寫少。 反之，將有很多的寫衝突造成等待
 CAS有3個運算元  記憶體值V 舊的預期值A 要修改的新值B 當且僅當預期值A和記憶體值V相同時，將記憶體值V修改為B，否則什麼都不做。   整個CAS操作是一個原子操作 判斷作法  TimeStamp Version 待更新欄位：更新前可以拿要更新的欄位的舊值和資料庫的現值進行比對，沒有變化則更新  https://stackoverflow.</description>
    </item>
    
    <item>
      <title>Azure_devops_reader</title>
      <link>https://harveyChang67.github.io/posts/azure_devops_reader/</link>
      <pubDate>Wed, 26 Jan 2022 06:18:31 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/azure_devops_reader/</guid>
      <description>Azure Devops 內的 Git 權限設定，AZ-400會有考題問到關於 Pull、Push 所需要設定的權限。
實際測試要有 「Contribute」 才能 Push。</description>
    </item>
    
    <item>
      <title>Deploy_local_git_to_azure_app_service</title>
      <link>https://harveyChang67.github.io/posts/deploy_local_git_to_azure_app_service/</link>
      <pubDate>Tue, 11 Jan 2022 01:49:14 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/deploy_local_git_to_azure_app_service/</guid>
      <description>  Go Deployment in Menu then select Local Git item.   Configure credential.   Push Source to Git Repo @ Azure   </description>
    </item>
    
    <item>
      <title>Azure_portal_devops_config</title>
      <link>https://harveyChang67.github.io/posts/azure_portal_devops_config/</link>
      <pubDate>Sat, 01 Jan 2022 03:29:02 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/azure_portal_devops_config/</guid>
      <description>AAD &amp;gt; Enterprise Application &amp;gt; devops &amp;gt; User :   Azure Devops 側還是無法.取得訂閱資訊
  就算由 Owner 建好 Service Connection 也無法讓 guest、member 直接使用，原因是操作 pipeline 的 account 對於訂閱的權限不夠。  從 Azure Portal 處給予該 account 至少 Reader 的角色   訂閱 &amp;gt; IAM &amp;gt; add role assignment
 但是此法有缺點，無法單一授權、指定 project 授權。</description>
    </item>
    
    <item>
      <title>Linux_run_sh_error</title>
      <link>https://harveyChang67.github.io/posts/linux_run_sh_error/</link>
      <pubDate>Wed, 29 Dec 2021 08:28:12 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/linux_run_sh_error/</guid>
      <description>Linux 執行 .sh 後出現 Syntax Error
 Syntax error: end of file unexpected (expecting “then”)
 問題不是語法錯誤，而是檔案編碼問題。
解決辦法是：
 dos2unix  或是 VSCode 右下方從 CRLF --&amp;gt; LF</description>
    </item>
    
    <item>
      <title>Azure_website</title>
      <link>https://harveyChang67.github.io/posts/azure_website/</link>
      <pubDate>Wed, 29 Dec 2021 07:29:51 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/azure_website/</guid>
      <description>Static Website Pages &amp;ndash;&amp;gt; Blob Ref：Host a static website in Azure Storage
C#.Net API &amp;ndash;&amp;gt; Azure App Service TODO</description>
    </item>
    
    <item>
      <title>Cret Exam</title>
      <link>https://harveyChang67.github.io/posts/cert_exam/</link>
      <pubDate>Wed, 08 Dec 2021 09:00:13 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/cert_exam/</guid>
      <description>記錄用
證照考試因為接觸到的資源是以英文為主， 為了避免關鍵字句不習慣翻譯版本（甚至簡體中文）， 所以考試可能、預設採用英文， 但是英文閱讀能力不頂尖的可能會敗在情境題組， 如：一整頁說明現況、各類型需求後， 再往下才會看到真正的題目。
實際應考發現， 各種英文閱讀考試技巧確實有用， 大概如下：
 快速掃描一次情境敘述，弄清楚『各處資訊類型』 看題目、選項後再去文章找有關資訊 答題  另方面， 上完證照課程後 ＂絕對＂ 不要直接去考試， 請去刷一下題庫感受一下：
 出題方式 出題方向  畢竟結果還是王道。</description>
    </item>
    
    <item>
      <title>Config_net_in_vmplayer</title>
      <link>https://harveyChang67.github.io/posts/config_net_in_vmplayer/</link>
      <pubDate>Sun, 28 Nov 2021 01:31:22 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/config_net_in_vmplayer/</guid>
      <description>No need &amp;lsquo;vmnetcfg&amp;rsquo;, just do 「3 Steps」:
  check &amp;lsquo;VMNet&amp;rsquo; on Host   add new &amp;lsquo;Network Adapter&amp;rsquo;   Config Network on Guest   Enjoy it ps. Because the image i used is backuoed from other pc(windows server 2003), so i added a new &amp;lsquo;Network Adapter&amp;rsquo;. Maybe you can edit config the #1 Net Adapter.</description>
    </item>
    
    <item>
      <title>Azure_subscriber</title>
      <link>https://harveyChang67.github.io/posts/azure_subscriber/</link>
      <pubDate>Fri, 26 Nov 2021 01:11:30 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/azure_subscriber/</guid>
      <description>購買 Azure 訂閱中 Devops 要注意的部分， 可以使用 Devops 的訂閱狀況有 3 種：
 Azure basic Visual Studio Enterprise Visual Studio Professional  ps. 若您的訂閱都不是上列方案，卻可以使用 Repos、Pipelines MS Hosted 的話就恭喜了</description>
    </item>
    
    <item>
      <title>Signed Cert</title>
      <link>https://harveyChang67.github.io/posts/signed-cert/</link>
      <pubDate>Thu, 25 Nov 2021 07:35:29 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/signed-cert/</guid>
      <description>產生並信任你自己的憑證 https://letsencrypt.org/zh-tw/docs/certificates-for-localhost/
openssl req -x509 -out localhost.crt -keyout localhost.key \  -newkey rsa:2048 -nodes -sha256 \  -subj &amp;#39;/CN=localhost&amp;#39; -extensions EXT -config &amp;lt;( \  printf &amp;#34;[dn]\nCN=localhost\n[req]\ndistinguished_name = dn\n[EXT]\nsubjectAltName=DNS:localhost\nkeyUsage=digitalSignature\nextendedKeyUsage=serverAuth&amp;#34;) 也說了 minica
2 https://gist.github.com/cecilemuller/9492b848eb8fe46d462abeb26656c4f8
有些方法 還有 mkcert &amp;lt;&amp;ndash; 最方便</description>
    </item>
    
    <item>
      <title>Webpack_learning</title>
      <link>https://harveyChang67.github.io/posts/webpack_learning/</link>
      <pubDate>Tue, 23 Nov 2021 03:27:12 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/webpack_learning/</guid>
      <description> Webpack 3 quickstarter: Configure webpack from scratch 初学者应该看的 Webpack 完整指南（2020） 鐵人賽系列－Webpack  </description>
    </item>
    
    <item>
      <title>Vue &amp; IE 相容問題</title>
      <link>https://harveyChang67.github.io/posts/vue_ie/</link>
      <pubDate>Thu, 18 Nov 2021 09:07:51 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/vue_ie/</guid>
      <description>IE8  Vue3 確定不支援 Vue2透過打包工具（babel）+運氣 可支援，有機會因為功能、使用lib較單純而可通過測試。  IE11  Vue3 原先可以，後來被移除 Vue2.x可以  Refs  https://stackoverflow.com/a/64837153 https://github.com/Ivocin/Translation/blob/master/Docs/0000-vue3-ie11-support.md https://v3.cn.vuejs.org/guide/migration/migration-build.html#%E9%A2%84%E6%9C%9F%E7%94%A8%E4%BE%8B  </description>
    </item>
    
    <item>
      <title>HRM Docker</title>
      <link>https://harveyChang67.github.io/posts/hrm-docker/</link>
      <pubDate>Tue, 16 Nov 2021 08:50:14 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/hrm-docker/</guid>
      <description>vite.config.js 中加入：
server: { // for HRM in Docker  host: &amp;#39;0.0.0.0&amp;#39;, watch: { usePolling: true }, } </description>
    </item>
    
    <item>
      <title>Husky &amp; Gitkraken</title>
      <link>https://harveyChang67.github.io/posts/husky-gitkraken/</link>
      <pubDate>Tue, 16 Nov 2021 03:20:56 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/husky-gitkraken/</guid>
      <description>GitKraken v7.7.2 之後改個設定就好： Windows 上執行的話，需要指定 GitKraken 關於 『sh.exe』的 path。</description>
    </item>
    
    <item>
      <title>Azure Pipelines 設定 SSH 不用密碼的 Service Connection</title>
      <link>https://harveyChang67.github.io/posts/azure_pipelines_ssh_service_connection/</link>
      <pubDate>Tue, 09 Nov 2021 02:12:18 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/azure_pipelines_ssh_service_connection/</guid>
      <description>因為 Azure Devops 的 Service Connection 上面沒有詳細說明，這邊紀錄下來。
 依照 安裝 OpenSSH 在 VM 上安裝 SSH Server 參考 OpenSSH 金鑰管理 建立使用者金鑰 務必參考這一段 部署公開金鑰  </description>
    </item>
    
    <item>
      <title>LINQ cheat sheet</title>
      <link>https://harveyChang67.github.io/posts/linq_cheat_sheet/</link>
      <pubDate>Tue, 02 Nov 2021 05:09:10 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/linq_cheat_sheet/</guid>
      <description>LINQ Samples
101 LINQ Samples
LINQ: Query Comprehension Syntax</description>
    </item>
    
    <item>
      <title>Proxy_on_lambda</title>
      <link>https://harveyChang67.github.io/posts/proxy_on_lambda/</link>
      <pubDate>Thu, 28 Oct 2021 07:33:28 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/proxy_on_lambda/</guid>
      <description>references  Making Http Requests in a Node.js Lambda Function proxy-agent Configuring Proxies for Node.js  </description>
    </item>
    
    <item>
      <title>AWS API Gateway 對外時能走固定IP的作法</title>
      <link>https://harveyChang67.github.io/posts/aws_api_gateway_with_static_ip/</link>
      <pubDate>Tue, 26 Oct 2021 09:18:39 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/aws_api_gateway_with_static_ip/</guid>
      <description>大部分資料、使用情境是
 外面 -&amp;gt; 固定 -&amp;gt; API Gateway -&amp;gt; &amp;hellip;
 使用情境若反過來的具體解答較少， 這邊分享一下測試過的方式。
 ENI + Static Public IP NAT Gateway Private Subnet -&amp;gt; NAT Gateway Lambda 網路設定綁 Private Subnet  可以在 AWS 另建 API Gateway + Resource Policy 限定IP 來測試。
References  Setting a Static IP for AWS Lambda (or any AWS instance) AWS Lambda functions with a static IP Tutorial: Build a Hello World REST API with Lambda proxy integration Create a REST API with Lambda proxy integration  </description>
    </item>
    
    <item>
      <title>關於幾個將 Win App 容器化的資訊</title>
      <link>https://harveyChang67.github.io/posts/about_containerize_windows_app/</link>
      <pubDate>Sun, 24 Oct 2021 04:36:32 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/about_containerize_windows_app/</guid>
      <description>Youtube  Debug WPF and Winforms .NET in Linux on a Remote Machine Delivering Desktop Apps in Containers Containerize WINDOWS desktop apps with LINUX containers using WINE. Desktop Apps in Docker Containers  Docker  scottyhardy/docker-wine wine-x11-novnc-docker Run A windows application with docker  </description>
    </item>
    
    <item>
      <title>VsCode 繪製 Draw.io</title>
      <link>https://harveyChang67.github.io/posts/drwaio_vscode/</link>
      <pubDate>Fri, 22 Oct 2021 13:37:43 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/drwaio_vscode/</guid>
      <description> VSCode Extension: Draw.io Integration diagrams-net-azure-libraries  </description>
    </item>
    
    <item>
      <title>C# 處理大 Text 檔案的實驗比對</title>
      <link>https://harveyChang67.github.io/posts/c-sharp-the-fastest-way-to-_-text/</link>
      <pubDate>Tue, 19 Oct 2021 09:07:56 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/c-sharp-the-fastest-way-to-_-text/</guid>
      <description>直觀寫法肯定是：
 Readline() 每行比對、處理一次  這邊有兩個網頁做了 ＂充分的＂實驗比對，
 C# .Net: Fastest Way to Read Text Files The Fastest Way to Read and Process Text Files using C# .Net  結論是， 把檔案都讀進 Array （相當於進記憶體）， 再運用平行運算處理完。</description>
    </item>
    
    <item>
      <title>幾項關於 Azure Pipelines 的紀錄</title>
      <link>https://harveyChang67.github.io/posts/notes_for_azure_pipelines/</link>
      <pubDate>Mon, 18 Oct 2021 02:10:08 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/notes_for_azure_pipelines/</guid>
      <description>基本原則  Variables in trigger block is not supported. Maybe all YAML file of Pipelines are same in all branches.  template  http://thecodemanual.pl/2020/04/02/build-templates-on-azure-devops.html https://docs.microsoft.com/zh-tw/azure/devops/pipelines/process/templates?view=azure-devops  detect CHANGED Dir to build &amp;amp; deploy  coding in PowerShell to detect What files are changed, get DIR and combine ARRAY build &amp;amp; deploy via FACTORY PATTERN  References:
 https://stackoverflow.com/questions/54541602/pass-array-as-inputs-to-azure-devops-yaml-task https://stackoverflow.com/questions/62835740/loops-and-arrays-in-azure-devops-pipelines https://stackoverflow.com/questions/53227343/triggering-azure-devops-builds-based-on-changes-to-sub-folders https://stackoverflow.com/questions/65088433/how-to-get-only-changed-files-using-azure-devops-pipelines https://stackoverflow.com/questions/67483194/pass-array-of-files-into-the-parameter-of-awscli1-task/67498247#67498247 https://stackoverflow.com/questions/68504910/can-i-loop-an-azure-pipelines-task-on-a-runtime-array-variable-instead-of-an-arr https://docs.microsoft.com/zh-tw/powershell/scripting/learn/deep-dives/everything-about-arrays?view=powershell-7.1#adding-to-arrays  開始 try 的：
variables: f1Flag: false f2Flag: false trigger: branches: include: - master # paths: # include: # - &amp;#34;test_pipelines/*&amp;#34; steps: - powershell: |## get the changed files $files=$(git diff-tree --no-commit-id --name-only -r $(Build.</description>
    </item>
    
    <item>
      <title>Compare: String Text or String Length?</title>
      <link>https://harveyChang67.github.io/posts/dotnet_compare_string/</link>
      <pubDate>Wed, 13 Oct 2021 02:33:44 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/dotnet_compare_string/</guid>
      <description>近日看到一篇討論文章： c# string performance - what is faster to compare, string text or string length
被接受的答案雖然蠻合理的，但有其他補充關於 C# String 的 source code 可以發現：
都考量到了
所以可以直接比對&amp;hellip;</description>
    </item>
    
    <item>
      <title>Azure Pipelines Key Concepts</title>
      <link>https://harveyChang67.github.io/posts/azure-pipelines-key-concepts/</link>
      <pubDate>Fri, 08 Oct 2021 08:06:53 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/azure-pipelines-key-concepts/</guid>
      <description>最近當了「Yaml 檔工程師」玩了 Azure Devops Pipelines，終於完成 Azure 編譯 Winforms 專案 並 部署到測試環境（VM）上面，過程中花了點時間找路，這邊紀錄一下。
Key concepts for new Azure Pipelines 優先參考：
 Key concepts for new Azure Pipelines users 新 Azure Pipelines 使用者的重要概念  文內地一張圖片有說明了 Azure Pipelines YAML 的結構階層關係，所以 YAML 檔案內的結構看啟回會像是這樣：
trigger: pool: stages: - stage: A jobs: - job: 1 steps: - task: - stage: B jobs: - deployment: VMDeploy 這也能從 YAML 結構描述參考找到資訊印證。
好玩的來了&amp;hellip;
Deploy to VM 會從 Environment - virtual machine resource找到從 Pipeline deploy 到 VM 的方法，恰好裡面有一段：</description>
    </item>
    
    <item>
      <title>Remove Tfs Connection From vs Solution</title>
      <link>https://harveyChang67.github.io/posts/remove-tfs-connection-from-vs-solution/</link>
      <pubDate>Thu, 07 Oct 2021 05:59:56 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/remove-tfs-connection-from-vs-solution/</guid>
      <description>  刪除專案中 *.vssscc、*.vspscc 副檔名的檔案。
  刪除 .sln 內的 GlobalSection(TeamFoundationVersionControl) 區塊。
  內部的 *.__proj 檔案內的這幾項也必須刪除：
&amp;lt;SccProjectName&amp;gt;XXX&amp;lt;/SccProjectName&amp;gt; &amp;lt;SccLocalPath&amp;gt;XXX&amp;lt;/SccLocalPath&amp;gt; &amp;lt;SccAuxPath&amp;gt;XXX&amp;lt;/SccAuxPath&amp;gt; &amp;lt;SccProvider&amp;gt;XXX&amp;lt;/SccProvider&amp;gt; 萬一實在太多了，請這條正規表示式 /^\s*(?:&amp;lt;Scc\w+&amp;gt;).+$/，使用 Notepad++ search &amp;amp; replace。
  </description>
    </item>
    
    <item>
      <title>Azure Pipelines 編譯VS專案引用外部參考資源 － Libaray Securefile</title>
      <link>https://harveyChang67.github.io/posts/azure-pipelines-libaray-securefile/</link>
      <pubDate>Wed, 06 Oct 2021 06:33:32 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/azure-pipelines-libaray-securefile/</guid>
      <description>若 WinForms 的專案有依些外部參考的 dll 在編譯時需要引入，數量有可能20-30個不等。 若因為並非這個專案內 Code Base所產生而不想放在 Git Repository 內，上去 Azure Devops 編譯可以這樣處理：
  全部壓縮一包 .zip
  上傳至「Library」   設定開放給 Pipeline 引用的權限   在 Pipelines 的 yaml 設定內加上 Download &amp;amp; Extract   編譯時可以加上參數指定這個暫時路徑：
- task: VSBuild@1 inputs: solution: &amp;#39;**\*.csproj&amp;#39; platform: &amp;#39;AnyCPU&amp;#39; configuration: &amp;#39;$(BuildConfiguration)&amp;#39; msbuildArgs: &amp;#39;/p:referencepath=$(Agent.TempDirectory)/reference&amp;#39; clean: true   就可以完成了。</description>
    </item>
    
    <item>
      <title>Pipeline Error About Free Parallelism</title>
      <link>https://harveyChang67.github.io/posts/pipeline-error-about-free-parallelism/</link>
      <pubDate>Fri, 01 Oct 2021 02:14:31 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/pipeline-error-about-free-parallelism/</guid>
      <description>嘗試用 Azure Pipeline 編譯 WinForms 的程式遇到一個問題：
 「No hosted parallelism has been purchased or granted」
 直接依照指示到 https://aka.ms/azpipelines-parallelism-request 填寫完成後 1-2個工作日可以完成 （操作步驟可以參考：【把玩Azure DevOps】Day8 CI/CD從這裡：設定第一個Pipeline(成功與失敗)）
看國外論壇討論說，因為微軟發現有不少人趁著試用作些其他布樂見的事情而產生許多流量，因此在 2021 年初增加了這項限制的政策。</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://harveyChang67.github.io/posts/hello-world/</link>
      <pubDate>Sat, 25 Sep 2021 07:26:54 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/hello-world/</guid>
      <description>Hugo + GitHub 的方式架設簡單的 Blog 很有趣，這邊紀錄幾個資訊。
 建置、測試環境：docker 編譯：Github Action Hosting：Github  Hugo 建置、測試環境：klakegg/hugo 環境指令：
docker run --rm -it -v $(pwd):/src klakegg/hugo:0.83.1 Windows 環境指令：
docker run --rm -it -v %cd%:/src klakegg/hugo:0.83.1 其後接 Hugo 的指令即可，例如：
  新增 post：
docker run --rm -it -v %cd%:/src klakegg/hugo:0.83.1 new posts/___.md   Local 執行 HUGO Server
docker run --rm -it -v %cd%:/src -p 1313:1313 klakegg/hugo:0.83.1 server   Themes：PaperMod https://github.com/adityatelange/hugo-PaperMod
裡面的安裝指引可供參考</description>
    </item>
    
  </channel>
</rss>
