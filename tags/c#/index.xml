<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>C# on 隨筆</title>
    <link>https://harveyChang67.github.io/tags/c#/</link>
    <description>Recent content in C# on 隨筆</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 30 Sep 2022 02:40:01 +0000</lastBuildDate><atom:link href="https://harveyChang67.github.io/tags/c#/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dotnet_parallel</title>
      <link>https://harveyChang67.github.io/posts/dotnet_parallel/</link>
      <pubDate>Fri, 30 Sep 2022 02:40:01 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/dotnet_parallel/</guid>
      <description>一個 Batch Task 遇到一段 Code， SQL.Select in a for-loop that runs 25k times
我請團隊在 Parallel 的修改版本加上限制。
var parallel = new ParallelOptions { MaxDegreeOfParallelism = 5 }; 也與另一個做法 Task.Run, Task.WhenAll 進一步區隔。
 ref:
 Running Async Foreach Loop C# async await Parallel.ForEach vs Task.Run and Task.WhenAll https://gitter.im/npgsql/npgsql?at=595a0319c101bc4e3a46654d  </description>
    </item>
    
    <item>
      <title>C_sharp_string2class</title>
      <link>https://harveyChang67.github.io/posts/c_sharp_string2class/</link>
      <pubDate>Wed, 25 May 2022 13:49:37 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/c_sharp_string2class/</guid>
      <description>String to Class and then call Method var t = Type.GetType(&amp;#34;WebApplication1.Services.&amp;#34;+ServiceName+&amp;#34;, WebApplication1&amp;#34;); var service_instance = Activator.CreateInstance((t)); ServiceValues actual = (ServiceValues)service_instance.GetType().GetMethod(FunctionName).Invoke(service_instance, new object[] { temp, fm_repo }); 第一行可以參考後，再進一步優化程式。
Console.WriteLine(typeof(TService).AssemblyQualifiedName); 有考慮進一步改寫為 function，參數可能是 className, methodName, 參數：new object[] { temp, fm_repo }</description>
    </item>
    
    <item>
      <title>C_sharp_big5</title>
      <link>https://harveyChang67.github.io/posts/c_sharp_big5/</link>
      <pubDate>Wed, 18 May 2022 07:19:28 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/c_sharp_big5/</guid>
      <description>需求 老式需求
3 個欄位的資訊， 希望擷取出中間的 16 bytes 的欄位
20040609台北市第81分公司0800-000123 20040609彰化縣第1分公司 0800-000123 通常會困擾於 編譯器對於資料型態長度的判定、編碼。 （其他程式語言也會遇到類似狀況）
在 C# 中則會遇到 string Length 變動的問題無法如預期做切割， 因此運用「==Big5編碼==」方式在 中文佔用 2 bytes、英數佔用 1 bytes 的特性， 再轉為 sub string。
System.Text.Encoding encoding = System.Text.Encoding.GetEncoding(950); string tempstr = &amp;#34;&amp;#34;; byte[] strBytes = encoding.GetBytes(str); tempstr = encoding.GetString(strBytes, start, lengths); </description>
    </item>
    
    <item>
      <title>RepoDB_C#</title>
      <link>https://harveyChang67.github.io/posts/repodb_c#/</link>
      <pubDate>Wed, 27 Apr 2022 11:21:06 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/repodb_c#/</guid>
      <description>RepoDB 在 Generic Repository Pattern 中很好用， 免去使用 Dapper 去自建 SQL 產生器， 但是有幾個限制 RepoDB Limitations， 其中一個令人訝異 -&amp;gt; Composite Keys。
Composite Keys RepoDB 只會處理 1 個 Primary Key&amp;hellip;. 這邊紀錄兩個相關的資訊
Update + condition termsList.Add( new QueryField(&amp;#39;Id&amp;#39;, Operation.Equal, &amp;#39;10095&amp;#39;) ); termsList.Add( new QueryField(&amp;#39;Name&amp;#39;, Operation.Equal, &amp;#39;John&amp;#39;) ); ret = dbConn.Update(entity, new QueryGroup(termsList, Conjunction.And)); Primary Properties Model 中標註 Mapping，
public class FMRMUSRT { [Primary] // Primary decoration  public string Id { get; set; } [Primary] // Primary decoration  public string item_cd { get; set; } public string?</description>
    </item>
    
    <item>
      <title>LINQ cheat sheet</title>
      <link>https://harveyChang67.github.io/posts/linq_cheat_sheet/</link>
      <pubDate>Tue, 02 Nov 2021 05:09:10 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/linq_cheat_sheet/</guid>
      <description>LINQ Samples
101 LINQ Samples
LINQ: Query Comprehension Syntax</description>
    </item>
    
    <item>
      <title>C# 處理大 Text 檔案的實驗比對</title>
      <link>https://harveyChang67.github.io/posts/c-sharp-the-fastest-way-to-_-text/</link>
      <pubDate>Tue, 19 Oct 2021 09:07:56 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/c-sharp-the-fastest-way-to-_-text/</guid>
      <description>直觀寫法肯定是：
 Readline() 每行比對、處理一次  這邊有兩個網頁做了 ＂充分的＂實驗比對，
 C# .Net: Fastest Way to Read Text Files The Fastest Way to Read and Process Text Files using C# .Net  結論是， 把檔案都讀進 Array （相當於進記憶體）， 再運用平行運算處理完。</description>
    </item>
    
    <item>
      <title>Compare: String Text or String Length?</title>
      <link>https://harveyChang67.github.io/posts/dotnet_compare_string/</link>
      <pubDate>Wed, 13 Oct 2021 02:33:44 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/dotnet_compare_string/</guid>
      <description>近日看到一篇討論文章： c# string performance - what is faster to compare, string text or string length
被接受的答案雖然蠻合理的，但有其他補充關於 C# String 的 source code 可以發現：
都考量到了
所以可以直接比對&amp;hellip;</description>
    </item>
    
  </channel>
</rss>
