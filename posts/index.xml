<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on 隨筆</title>
    <link>https://harveyChang67.github.io/posts/</link>
    <description>Recent content in Posts on 隨筆</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 22 Oct 2021 13:37:43 +0000</lastBuildDate><atom:link href="https://harveyChang67.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>VsCode 繪製 Draw.io</title>
      <link>https://harveyChang67.github.io/posts/drwaio_vscode/</link>
      <pubDate>Fri, 22 Oct 2021 13:37:43 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/drwaio_vscode/</guid>
      <description> VSCode Extension: Draw.io Integration diagrams-net-azure-libraries  </description>
    </item>
    
    <item>
      <title>C# 處理大 Text 檔案的實驗比對</title>
      <link>https://harveyChang67.github.io/posts/c-sharp-the-fastest-way-to-_-text/</link>
      <pubDate>Tue, 19 Oct 2021 09:07:56 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/c-sharp-the-fastest-way-to-_-text/</guid>
      <description>直觀寫法肯定是：
 Readline() 每行比對、處理一次  這邊有兩個網頁做了 ＂充分的＂實驗比對，
 C# .Net: Fastest Way to Read Text Files The Fastest Way to Read and Process Text Files using C# .Net  結論是， 把檔案都讀進 Array （相當於進記憶體）， 再運用平行運算處理完。</description>
    </item>
    
    <item>
      <title>幾項關於 Azure Pipelines 的紀錄</title>
      <link>https://harveyChang67.github.io/posts/notes_for_azure_pipelines/</link>
      <pubDate>Mon, 18 Oct 2021 02:10:08 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/notes_for_azure_pipelines/</guid>
      <description>基本原則  Variables in trigger block is not supported. Maybe all YAML file of Pipelines are same in all branches.  template  http://thecodemanual.pl/2020/04/02/build-templates-on-azure-devops.html https://docs.microsoft.com/zh-tw/azure/devops/pipelines/process/templates?view=azure-devops  detect CHANGED Dir to build &amp;amp; deploy  coding in PowerShell to detect What files are changed, get DIR and combine ARRAY build &amp;amp; deploy via FACTORY PATTERN  References:
 https://stackoverflow.com/questions/54541602/pass-array-as-inputs-to-azure-devops-yaml-task https://stackoverflow.com/questions/62835740/loops-and-arrays-in-azure-devops-pipelines https://stackoverflow.com/questions/53227343/triggering-azure-devops-builds-based-on-changes-to-sub-folders https://stackoverflow.com/questions/65088433/how-to-get-only-changed-files-using-azure-devops-pipelines https://stackoverflow.com/questions/67483194/pass-array-of-files-into-the-parameter-of-awscli1-task/67498247#67498247 https://stackoverflow.com/questions/68504910/can-i-loop-an-azure-pipelines-task-on-a-runtime-array-variable-instead-of-an-arr https://docs.microsoft.com/zh-tw/powershell/scripting/learn/deep-dives/everything-about-arrays?view=powershell-7.1#adding-to-arrays  開始 try 的：
variables: f1Flag: false f2Flag: false trigger: branches: include: - master # paths: # include: # - &amp;#34;test_pipelines/*&amp;#34; steps: - powershell: |## get the changed files $files=$(git diff-tree --no-commit-id --name-only -r $(Build.</description>
    </item>
    
    <item>
      <title>Compare: String Text or String Length?</title>
      <link>https://harveyChang67.github.io/posts/dotnet_compare_string/</link>
      <pubDate>Wed, 13 Oct 2021 02:33:44 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/dotnet_compare_string/</guid>
      <description>近日看到一篇討論文章： c# string performance - what is faster to compare, string text or string length
被接受的答案雖然蠻合理的，但有其他補充關於 C# String 的 source code 可以發現：
都考量到了
所以可以直接比對&amp;hellip;</description>
    </item>
    
    <item>
      <title>Azure Pipelines Key Concepts</title>
      <link>https://harveyChang67.github.io/posts/azure-pipelines-key-concepts/</link>
      <pubDate>Fri, 08 Oct 2021 08:06:53 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/azure-pipelines-key-concepts/</guid>
      <description>最近當了「Yaml 檔工程師」玩了 Azure Devops Pipelines，終於完成 Azure 編譯 Winforms 專案 並 部署到測試環境（VM）上面，過程中花了點時間找路，這邊紀錄一下。
Key concepts for new Azure Pipelines 優先參考：
 Key concepts for new Azure Pipelines users 新 Azure Pipelines 使用者的重要概念  文內地一張圖片有說明了 Azure Pipelines YAML 的結構階層關係，所以 YAML 檔案內的結構看啟回會像是這樣：
trigger: pool: stages: - stage: A jobs: - job: 1 steps: - task: - stage: B jobs: - deployment: VMDeploy 這也能從 YAML 結構描述參考找到資訊印證。
好玩的來了&amp;hellip;
Deploy to VM 會從 Environment - virtual machine resource找到從 Pipeline deploy 到 VM 的方法，恰好裡面有一段：</description>
    </item>
    
    <item>
      <title>Remove Tfs Connection From vs Solution</title>
      <link>https://harveyChang67.github.io/posts/remove-tfs-connection-from-vs-solution/</link>
      <pubDate>Thu, 07 Oct 2021 05:59:56 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/remove-tfs-connection-from-vs-solution/</guid>
      <description>  刪除專案中 *.vssscc、*.vspscc 副檔名的檔案。
  刪除 .sln 內的 GlobalSection(TeamFoundationVersionControl) 區塊。
  內部的 *.__proj 檔案內的這幾項也必須刪除：
&amp;lt;SccProjectName&amp;gt;XXX&amp;lt;/SccProjectName&amp;gt; &amp;lt;SccLocalPath&amp;gt;XXX&amp;lt;/SccLocalPath&amp;gt; &amp;lt;SccAuxPath&amp;gt;XXX&amp;lt;/SccAuxPath&amp;gt; &amp;lt;SccProvider&amp;gt;XXX&amp;lt;/SccProvider&amp;gt; 萬一實在太多了，請這條正規表示式 /^\s*(?:&amp;lt;Scc\w+&amp;gt;).+$/，使用 Notepad++ search &amp;amp; replace。
  </description>
    </item>
    
    <item>
      <title>Azure Pipelines 編譯VS專案引用外部參考資源 － Libaray Securefile</title>
      <link>https://harveyChang67.github.io/posts/azure-pipelines-libaray-securefile/</link>
      <pubDate>Wed, 06 Oct 2021 06:33:32 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/azure-pipelines-libaray-securefile/</guid>
      <description>若 WinForms 的專案有依些外部參考的 dll 在編譯時需要引入，數量有可能20-30個不等。 若因為並非這個專案內 Code Base所產生而不想放在 Git Repository 內，上去 Azure Devops 編譯可以這樣處理：
  全部壓縮一包 .zip
  上傳至「Library」   設定開放給 Pipeline 引用的權限   在 Pipelines 的 yaml 設定內加上 Download &amp;amp; Extract   編譯時可以加上參數指定這個暫時路徑：
- task: VSBuild@1 inputs: solution: &amp;#39;**\*.csproj&amp;#39; platform: &amp;#39;AnyCPU&amp;#39; configuration: &amp;#39;$(BuildConfiguration)&amp;#39; msbuildArgs: &amp;#39;/p:referencepath=$(Agent.TempDirectory)/reference&amp;#39; clean: true   就可以完成了。</description>
    </item>
    
    <item>
      <title>Pipeline Error About Free Parallelism</title>
      <link>https://harveyChang67.github.io/posts/pipeline-error-about-free-parallelism/</link>
      <pubDate>Fri, 01 Oct 2021 02:14:31 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/pipeline-error-about-free-parallelism/</guid>
      <description>嘗試用 Azure Pipeline 編譯 WinForms 的程式遇到一個問題：
 「No hosted parallelism has been purchased or granted」
 直接依照指示到 https://aka.ms/azpipelines-parallelism-request 填寫完成後 1-2個工作日可以完成 （操作步驟可以參考：【把玩Azure DevOps】Day8 CI/CD從這裡：設定第一個Pipeline(成功與失敗)）
看國外論壇討論說，因為微軟發現有不少人趁著試用作些其他布樂見的事情而產生許多流量，因此在 2021 年初增加了這項限制的政策。</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://harveyChang67.github.io/posts/hello-world/</link>
      <pubDate>Sat, 25 Sep 2021 07:26:54 +0000</pubDate>
      
      <guid>https://harveyChang67.github.io/posts/hello-world/</guid>
      <description>Hugo + GitHub 的方式架設簡單的 Blog 很有趣，這邊紀錄幾個資訊。
 建置、測試環境：docker 編譯：Github Action Hosting：Github  Hugo 建置、測試環境：klakegg/hugo 環境指令：
docker run --rm -it -v $(pwd):/src klakegg/hugo:0.83.1 Windows 環境指令：
docker run --rm -it -v %cd%:/src klakegg/hugo:0.83.1 其後接 Hugo 的指令即可，例如：
  新增 post：
docker run --rm -it -v %cd%:/src klakegg/hugo:0.83.1 new posts/___.md   Local 執行 HUGO Server
docker run --rm -it -v %cd%:/src -p 1313:1313 klakegg/hugo:0.83.1 server   Themes：PaperMod https://github.com/adityatelange/hugo-PaperMod
裡面的安裝指引可供參考</description>
    </item>
    
  </channel>
</rss>
